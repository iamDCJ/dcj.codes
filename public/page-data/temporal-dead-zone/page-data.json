{"componentChunkName":"component---src-templates-blog-post-js","path":"/temporal-dead-zone/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"ddabf1b5-6fed-573d-a5a8-3d10ec83fecc","excerpt":"The TDZ is the â€˜spaceâ€™ between a reference to a particular  or  statement, and its actual declaration/initialization. Any reference to a variable declared withâ€¦","html":"<p>The TDZ is the â€˜spaceâ€™ between a reference to a particular <code class=\"language-text\">let</code> or <code class=\"language-text\">const</code> statement, and its actual declaration/initialization.</p>\n<p>Any reference to a variable declared with <code class=\"language-text\">let</code> or <code class=\"language-text\">const</code> before it is initialised will result in a <code class=\"language-text\">referenceError</code>, take a look at the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(bc);\n/* ==========\n* ===========\n* === TDZ ===\n* ===========\n=========== */\nlet bc = &quot;ðŸ¦• Dinosaurs ðŸ¦–&quot;;</code></pre></div>\n<p>This will throw an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cannot access &#39;bc&#39; before initialization</code></pre></div>\n<p>The <code class=\"language-text\">bc</code> variable is referenced before it is declared, which is not valid when using <code class=\"language-text\">const</code> or <code class=\"language-text\">let</code> statements; <strong>the variable is in a <code class=\"language-text\">TDZ</code></strong>.</p>\n<p>Prior to ES6 the above snippet would not result in an error; <code class=\"language-text\">var</code> statements are <strong>hoisted</strong> to the top of their respected lexical environments - the hoisted variables are essentially set with a starting value of <code class=\"language-text\">undefined</code> and for good or bad(bad) can be referenced before initialization, without throwing an error.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(bc);\n/* ==========\n* ===========\n* === TDZ ===\n* ===========\n=========== */\nvar bc = &quot;ðŸ¦• Dinosaurs ðŸ¦–&quot;;\n// undefined</code></pre></div>\n<p><strong>No error, here.</strong></p>\n<h3>Let, Const and Hoisting</h3>\n<p>The above snippet, and many resources out there, suggest that <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> variables are not â€˜hoistedâ€™ to the top of their respective lexical environments, however this isnâ€™t entirely accurate in that both <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> are treated in the same way as <code class=\"language-text\">var</code> during the first pass of the program, the difference being how the engine deals with the early referencing of a binding.</p>\n<blockquote>\n<p>The variables are created when their containing Lexical Environment is instantiated but may not be accessed in any way until the variableâ€™s LexicalBinding is evaluated. - ECMAScript Specification.</p>\n</blockquote>\n<p>This paragraph does suggest that <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> are indeed â€˜hoistedâ€™:</p>\n<blockquote>\n<p>The variables are created when their containing Lexical Environment is instantiatedâ€¦</p>\n</blockquote>\n<p>but the engine prevents them from being accessed until the engine has evaluated the respective binding, i.e. the engine does not allow access to the variable until it performs a right-hand-side(execution) lookup on the variable.</p>\n<blockquote>\n<p>but may not be accessed in any way until the variableâ€™s LexicalBinding is evaluated.</p>\n</blockquote>\n<p>It is good to know that accessing a binding declared using let or const will now throw an error, and whether it is technically hoisted or not is academic.</p>\n<p>The key take-away from the above is to make sure you <strong>always declare your variables at the top of the respective scope</strong>, no matter your statement flavor.</p>","frontmatter":{"title":"ES6 101 - The Temporal Dead Zone","date":"August 21, 2019","description":"Getting to know the 'Temporal Dead Zone'..."}},"previous":{"fields":{"slug":"/let/"},"frontmatter":{"title":"ES6 101 - using the let statement"}},"next":null},"pageContext":{"id":"ddabf1b5-6fed-573d-a5a8-3d10ec83fecc","previousPostId":"ba56c288-039f-5d18-bb0e-864471e5188b","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}